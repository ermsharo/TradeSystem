{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\n\nfunction useFetch(url, opts) {\n  _s();\n\n  const [response, setResponse] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  useEffect(() => {\n    setLoading(true);\n    fetch(url, opts).then(res => {\n      setResponse(res.data);\n      setLoading(false);\n    }).catch(() => {\n      setHasError(true);\n      setLoading(false);\n    });\n  }, [url]);\n  return [response, loading, hasError];\n}\n\n_s(useFetch, \"2P4JWcX0CkVNVRdIRDSsSZZFJRU=\");","map":{"version":3,"sources":["/home/emilio/Projetos/TraderClient/my-app/src/services/requests.js"],"names":["useState","useEffect","useFetch","url","opts","response","setResponse","loading","setLoading","hasError","setHasError","fetch","then","res","data","catch"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;;AAGA,SAASC,QAAT,CAAkBC,GAAlB,EAAuBC,IAAvB,EAA6B;AAAA;;AACzB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACS,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,KAAD,CAAxC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZO,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAG,IAAAA,KAAK,CAACR,GAAD,EAAMC,IAAN,CAAL,CACKQ,IADL,CACWC,GAAD,IAAS;AACfP,MAAAA,WAAW,CAACO,GAAG,CAACC,IAAL,CAAX;AACAN,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KAJD,EAKKO,KALL,CAKW,MAAM;AACTL,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAF,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KARL;AASH,GAXQ,EAWN,CAAEL,GAAF,CAXM,CAAT;AAYA,SAAO,CAAEE,QAAF,EAAYE,OAAZ,EAAqBE,QAArB,CAAP;AACH;;GAjBQP,Q","sourcesContent":["import {useState, useEffect} from 'react';\n\n\nfunction useFetch(url, opts) {\n    const [response, setResponse] = useState(null)\n    const [loading, setLoading] = useState(false)\n    const [hasError, setHasError] = useState(false)\n    useEffect(() => {\n        setLoading(true)\n        fetch(url, opts)\n            .then((res) => {\n            setResponse(res.data)\n            setLoading(false)\n        })\n            .catch(() => {\n                setHasError(true)\n                setLoading(false)\n            })\n    }, [ url ])\n    return [ response, loading, hasError ]\n}"]},"metadata":{},"sourceType":"module"}