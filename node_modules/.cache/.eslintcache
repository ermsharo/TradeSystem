[{"/home/emilio/Projetos/TraderClient/src/index.js":"1","/home/emilio/Projetos/TraderClient/src/reportWebVitals.js":"2","/home/emilio/Projetos/TraderClient/src/App.js":"3","/home/emilio/Projetos/TraderClient/src/components/Header.js":"4","/home/emilio/Projetos/TraderClient/src/components/Footer.js":"5","/home/emilio/Projetos/TraderClient/src/services/requests.js":"6","/home/emilio/Projetos/TraderClient/src/pages/PaginaFonteExterna/index.js":"7","/home/emilio/Projetos/TraderClient/src/pages/PaginaFonteLocal/index.js":"8","/home/emilio/Projetos/TraderClient/src/pages/PaginaExibicaoIndicadores/index.js":"9","/home/emilio/Projetos/TraderClient/src/pages/PaginaHome/Home.js":"10","/home/emilio/Projetos/TraderClient/src/components/CandleStick/index.js":"11","/home/emilio/Projetos/TraderClient/src/components/MACD/index.js":"12"},{"size":581,"mtime":1637173668309,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":1632946353599,"results":"15","hashOfConfig":"14"},{"size":684,"mtime":1637788798528,"results":"16","hashOfConfig":"14"},{"size":1199,"mtime":1637185510666,"results":"17","hashOfConfig":"14"},{"size":365,"mtime":1634603416331,"results":"18","hashOfConfig":"14"},{"size":582,"mtime":1633112442082,"results":"19","hashOfConfig":"14"},{"size":151,"mtime":1637177015593,"results":"20","hashOfConfig":"14"},{"size":139,"mtime":1637177074586,"results":"21","hashOfConfig":"14"},{"size":9845,"mtime":1637790321740,"results":"22","hashOfConfig":"14"},{"size":2112,"mtime":1637177058536,"results":"23","hashOfConfig":"14"},{"size":6993,"mtime":1637788583536,"results":"24","hashOfConfig":"14"},{"size":4049,"mtime":1637788424345,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"o5cbnz",{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"28"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"28"},"/home/emilio/Projetos/TraderClient/src/index.js",[],["57","58"],"/home/emilio/Projetos/TraderClient/src/reportWebVitals.js",[],"/home/emilio/Projetos/TraderClient/src/App.js",["59","60","61","62","63","64","65"],"/home/emilio/Projetos/TraderClient/src/components/Header.js",["66","67"],"import React from \"react\";\nimport styled from \"styled-components\";\nimport AppBar from '@mui/material/AppBar';\nimport Box from '@mui/material/Box';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport IconButton from '@mui/material/IconButton';\nimport MenuIcon from '@mui/icons-material/Menu';\n\nconst HeaderBox = styled.header`\n \n \n background-color: black;\n color:white; \n display: flex;\n justify-content: center;\n\n\n`\n\n\nconst Logo = styled.div`\n\nimg{\n    margin-top: 10px;\n    margin-bottom: 10px;\n   width: 30px;\n   height: 30px;\n}\n`; \n\n\n\nexport default function Header()\n{\n\n    return(\n\n        <Box sx={{ flexGrow: 2 }}>\n        <AppBar position=\"fixed\" color =\"default\">\n          <Toolbar variant=\"dense\">\n            <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\" sx={{ mr: 2 }}>\n              <MenuIcon />\n            </IconButton>\n            <Logo><img src = \"https://upload.wikimedia.org/wikipedia/commons/a/ab/Logo_TV_2015.png\" />\n            </Logo>\n            <Typography variant=\"h6\" color=\"inherit\" component=\"div\">\n              \n            </Typography>\n          </Toolbar>\n        </AppBar>\n      </Box>\n\n    )\n\n\n}\n\n","/home/emilio/Projetos/TraderClient/src/components/Footer.js",[],"/home/emilio/Projetos/TraderClient/src/services/requests.js",["68"],"import {useState, useEffect} from 'react';\n\n\nexport function useFetch(url, opts) {\n    const [response, setResponse] = useState(null)\n    const [loading, setLoading] = useState(false)\n    const [hasError, setHasError] = useState(false)\n    useEffect(() => {\n        setLoading(true)\n        fetch(url, opts)\n            .then((res) => {\n            setResponse(res.data)\n            setLoading(false)\n        })\n            .catch(() => {\n                setHasError(true)\n                setLoading(false)\n            })\n    }, [ url ])\n    return [ response, loading, hasError ]\n}",["69","70"],"/home/emilio/Projetos/TraderClient/src/pages/PaginaFonteExterna/index.js",[],"/home/emilio/Projetos/TraderClient/src/pages/PaginaFonteLocal/index.js",[],"/home/emilio/Projetos/TraderClient/src/pages/PaginaExibicaoIndicadores/index.js",["71","72","73","74","75","76","77","78","79","80","81","82","83"],"/home/emilio/Projetos/TraderClient/src/pages/PaginaHome/Home.js",["84","85"],"import React from \"react\";\nimport styled from \"styled-components\";\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport UploadFileIcon from '@mui/icons-material/UploadFile';\nimport LanguageOutlinedIcon from '@mui/icons-material/LanguageOutlined';\n\n\nconst HomeBox = styled.div`\n \n \n\n\n\n`;\n\n\nconst AboutBox = styled.div`\n \n \ndisplay: grid;\ngrid-template-columns: 1fr 1fr;\nwidth: 60vw;\nmargin: auto;\nmargin-top: 64px;\n\n`\n\nconst AboutText = styled.div`\n \n font-size: 24px;\n padding: 20px;\n margin-top: 24px;\n\n\n`\n\nconst AboutTitle = styled.div`\n \n font-size: 24px;\n padding: 35px;\n margin-top: 24px;\n\n\n`\n\n\n\nconst DataOptionsBox = styled.div`\n \n display: grid;\n grid-template-columns: 1fr 1fr;\n grid-column-gap: 5vw;\n width: 60vw;\n margin: auto;\n margin-top: 5vw;\n\n\n\n`;\n\n\n\n\n\nconst Cover = styled.div`\n  background-color :black; \n  background-position: center;\n  background-size: cover;\n  color: white; \n  min-height: calc(100vh - 60px) ;\n  position: relative;\n  top:60px;\n\n\n\n`;\n\n\n\n\n\n\n\nexport default function Home(){\n\n    return(\n\n\n<>\n\n\n<Cover> \n\n    <AboutTitle><Typography align = 'center' variant = \"h2\"> Trader System</Typography></AboutTitle>\n    <AboutText>\n        <Typography variant= \"h6\" style = {{width: '65vw', margin:'auto'}}>\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam mauris eros, mattis vel blandit sed, feugiat porta arcu. Donec interdum, felis non mattis congue, mauris ante maximus justo, ac pretium arcu felis et quam. Maecenas mattis rhoncus elementum. Proin commodo nibh vitae ipsum ullamcorper posuere. Cras eget fermentum massa. Suspendisse purus velit, interdum ac aliquet in, porttitor id neque. Praesent non massa neque. Fusce convallis,  \n        </Typography>    \n            </AboutText>\n\n \n<DataOptionsBox>\n\n<Button variant=\"contained\" endIcon={<UploadFileIcon /> }  disableElevation>\n  Enviar sua fonte de dados \n</Button>\n<Button variant=\"contained\"    endIcon={<LanguageOutlinedIcon />}  disableElevation>\n    Usar fonte de dados de terceiro \n</Button>\n\n</DataOptionsBox>\n\n</Cover>\n\n\n\n\n</>\n\n\n    )\n\n\n}\n\n","/home/emilio/Projetos/TraderClient/src/components/CandleStick/index.js",["86","87","88","89","90"],"\nimport Chart from 'react-apexcharts'\nimport ReactDOM from 'react-dom';\nimport React from 'react';\nimport styled from \"styled-components\";\n\n\nconst MACDFormatedData = (MACD) =>{\n console.log('MACD', MACD);\n\n  let x = MACD.x; \n  let y = MACD.y; \n\n  //[Timestamp, O, H, L, C]\n\n   let size = x.length; \nconsole.log(\"Date\", x.length)\n\n  let MACDFormatedData = [];\n\n  for(let i = 0 ; i < size ; i++){\n\n    MACDFormatedData.push({x : new Date(x[i]) , y: y[x[i]] });\n  }\n  \nconsole.log('macd --->',MACDFormatedData);  \n/*  return(FormatCandleData);  */\n\nreturn MACDFormatedData; \n  \n }; \n\n\n const ChartsGrid = styled.div`\n display: grid; \n grid-template-columns: 1fr 1fr;\n \n \n `\n\n\n\nconst traceFormatedData = (trace) =>{\n\n\n    let x = trace.x; \n    let y = trace.y; \n\n    //[Timestamp, O, H, L, C]\n \n     let size = x.length; \n console.log(\"Date\", x.length)\n\n    let traceFormatedData = [];\n \n    for(let i = 0 ; i < size ; i++){\n \n      traceFormatedData.push({x : new Date(x[i]) , y:y[i]});\n    }\n    \n console.log(traceFormatedData);  \n/*  return(FormatCandleData);  */\n\nreturn traceFormatedData; \n    \n   }; \n\n\nexport default class ApexChart extends React.Component {\n  constructor(props) {\n    super(props);\n    \n\n    this.state = {\n        series: [{\n          name: 'candle',\n          type :'candlestick',\n          data: this.props.candleData,\n        },\n        {\n          name: this.props.traceSmall.name,\n          type: 'line',\n          data: traceFormatedData(this.props.traceSmall),\n          \n            stroke:{\n              color: 'red',\n              fillColor: 'red', \n              strokeColor: 'red', \n              width: '5px',\n            },\n            fill:{\n                   color: 'red',\n            },\n            style: {\n              color: 'red',\n            }\n         \n        },\n        \n        {\n          name: this.props.traceLarge.name,\n          type: 'line',\n          data: traceFormatedData(this.props.traceLarge),\n            color: 'blue',\n            stroke:{\n              color: 'red',\n              fillColor: 'red', \n              strokeColor: 'red', \n              width: '5px',\n            },\n            fill:{\n              color: 'red',\n            }\n        \n        },\n        \n        ],\n\n\n        MACDBar: [{\n          name: 'macd',\n           data: this.props.candleData\n        }],\n              options: {\n                chart: {\n                  type: 'candlestick',\n                  height: 290,\n                  id: 'candles',\n                  toolbar: {\n                    autoSelected: 'pan',\n                    show: true\n                  },\n                  zoom: {\n                    enabled: false\n                  },\n                },\n                plotOptions: {\n                  candlestick: {\n                    colors: {\n                      upward: '#3C90EB',\n                      downward: '#DF7D46'\n                    }\n                  },\n                  line:{\n                    color: 'red'\n                  }\n                },\n                xaxis: {\n                  type: 'datetime'\n                }\n              },\n            \n              optionsMACD: {\n                chart: {\n                  type: 'candlestick',\n                  height: 290,\n                  id: 'candles',\n                  toolbar: {\n                    autoSelected: 'pan',\n                    show: true\n                  },\n                  zoom: {\n                    enabled: false\n                  },\n                },\n                plotOptions: {\n                  candlestick: {\n                    colors: {\n                      upward: '#3C90EB',\n                      downward: '#DF7D46'\n                    }\n                  },\n                  line:{\n                    color: 'red'\n                  }\n                },\n                xaxis: {\n                  type: 'datetime'\n                }\n              },\n            \n\n\n              seriesBar: [{\n                name: 'volume',\n              data:   MACDFormatedData(this.props.traceMACD),\n              }],\n              optionsBar: {\n                chart: {\n                  height: '100%',\n                  type: 'bar',\n                  brush: {\n                    enabled: true,\n                    target: 'candles'\n                  },\n                  selection: {\n                    enabled: true,\n                    xaxis: {\n                    \n                    },\n                    fill: {\n                      color: '#ccc',\n                      opacity: 0.4\n                    },\n                    stroke: {\n                      color: '#0D47A1',\n                    }\n                  },\n                },\n                dataLabels: {\n                  enabled: false\n                },\n                plotOptions: {\n                  bar: {\n                    columnWidth: '80%',\n                    colors: {\n                      ranges: [{\n                        from: -1000,\n                        to: 0,\n                        color: '#F15B46'\n                      }, {\n                        from: 1,\n                        to: 10000,\n                        color: '#FEB019'\n                      }],\n                \n                    },\n                  }\n                },\n                stroke: {\n                  width: 0\n                },\n                xaxis: {\n                  type: 'datetime',\n                  axisBorder: {\n                    offsetX: 13\n                  }\n                },\n                yaxis: {\n                  labels: {\n                    show: false\n                  }\n                }\n              },\n            \n            \n            };\n          }\n        \n\n\n\n  render() {\n\n\n    let CandleFormatdata = {\n      data: this.props.candleData\n    }\n\n    \n    MACDFormatedData(this.props.traceMACD)\n  \n\n    let seriesMACD = {\n      data: MACDFormatedData(this.props.traceMACD)\n    }; \n\n    let OptionsMACD = {\n   /*    chart: {\n        type: 'bar',\n        height: 430\n      }, */\n     /*  plotOptions: {\n        bar: {\n          horizontal: true,\n          dataLabels: {\n            position: 'top',\n          },\n        }\n      }, */\n   /*    dataLabels: {\n        enabled: true,\n        offsetX: -6,\n        style: {\n          fontSize: '12px',\n          colors: ['#fff']\n        }\n      }, */\n      stroke: {\n        show: true,\n        width: 1,\n        colors: ['#fff']\n      },\n      tooltip: {\n        shared: true,\n        intersect: false\n      },\n/*       xaxis: {\n        categories: [2001, 2002, 2003, 2004, 2005, 2006, 2007],\n      }, */\n    };\n\n\n\n    return (\n      \n\n<div class=\"chart-box\">\n<div id=\"chart-candlestick\">\n<Chart options={this.state.options} series={this.state.series} type=\"candlestick\" height={350} />\n\n</div>\n\n\n<div id=\"chart-bar\">\n  \n<Chart options={this.state.optionsBar} series={this.state.seriesBar} type=\"bar\" height={160} />\n</div>\n</div>\n\n\n\n\n\n      );\n    }\n  }\n\n","/home/emilio/Projetos/TraderClient/src/components/MACD/index.js",["91","92","93","94","95"],"\nimport Chart from 'react-apexcharts'\nimport ReactDOM from 'react-dom';\nimport React from 'react';\nimport styled from \"styled-components\";\n\n\nconst MACDFormatedData = (MACD) =>{\n console.log('MACD', MACD);\n\n  let x = MACD.x; \n  let y = MACD.y; \n\n  //[Timestamp, O, H, L, C]\n\n   let size = x.length; \nconsole.log(\"Date\", x.length)\n\n  let MACDFormatedData = [];\n\n  for(let i = 0 ; i < size ; i++){\n\n    MACDFormatedData.push({x : new Date(x[i]) , y: y[x[i]] });\n  }\n  \nconsole.log('macd --->',MACDFormatedData);  \n/*  return(FormatCandleData);  */\n\nreturn MACDFormatedData; \n  \n }; \n\n\n\n\nconst traceFormatedData = (trace) =>{\n\n\n    let x = trace.x; \n    let y = trace.y; \n\n    //[Timestamp, O, H, L, C]\n \n     let size = x.length; \n console.log(\"Date\", x.length)\n\n    let traceFormatedData = [];\n \n    for(let i = 0 ; i < size ; i++){\n \n      traceFormatedData.push({x : new Date(x[i]) , y:y[i]});\n    }\n    \n console.log(traceFormatedData);  \n/*  return(FormatCandleData);  */\n\nreturn traceFormatedData; \n    \n   }; \n\n\nexport default class ApexChart extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n        \n          series: [{\n            data:   MACDFormatedData(this.props.traceMACD),\n          }],\n          options: {\n            chart: {\n              type: 'bar',\n              height: 290,\n              id: 'bar',\n              toolbar: {\n                autoSelected: 'pan',\n                show: false\n              },\n              zoom: {\n                enabled: false\n              },\n              toolbar: {\n                autoSelected: 'pan',\n                show: true\n              },\n            },\n            plotOptions: {\n              candlestick: {\n                colors: {\n                  upward: '#3C90EB',\n                  downward: '#DF7D46'\n                }\n              }\n            },\n            xaxis: {\n              type: 'datetime'\n            }\n          },\n        \n          seriesBar: [{\n            name: 'volume',\n            data:   MACDFormatedData(this.props.traceMACD)\n          }],\n          optionsBar: {\n            chart: {\n              height: 160,\n              type: 'bar',\n              brush: {\n                enabled: true,\n                target: 'candles'\n              },\n              selection: {\n                enabled: true,\n                xaxis: {\n                  min: new Date('20 Jan 2017').getTime(),\n                  max: new Date('10 Dec 2017').getTime()\n                },\n                fill: {\n                  color: '#ccc',\n                  opacity: 0.4\n                },\n                stroke: {\n                  color: '#0D47A1',\n                }\n              },\n            },\n            dataLabels: {\n              enabled: false\n            },\n            plotOptions: {\n              bar: {\n                columnWidth: '80%',\n                colors: {\n                  ranges: [{\n                    from: -1000,\n                    to: 0,\n                    color: '#F15B46'\n                  }, {\n                    from: 1,\n                    to: 10000,\n                    color: '#FEB019'\n                  }],\n            \n                },\n              }\n            },\n            stroke: {\n              width: 0\n            },\n            xaxis: {\n              type: 'datetime',\n              axisBorder: {\n                offsetX: 13\n              }\n            },\n            yaxis: {\n              labels: {\n                show: false\n              }\n            }\n          },\n        \n        \n        };\n      }\n\n\n\n  render() {\n\n\n    let CandleFormatdata = {\n      data: this.props.candleData\n    }\n\n    \n    MACDFormatedData(this.props.traceMACD)\n  \n\n\n    return (\n      \n<div class=\"chart-box\">\n  <div id=\"chart\">\n  <Chart options={this.state.options} series={this.state.series} type=\"bar\" height={290} />\n</div>\n  <div id=\"chart-bar\">\n  <Chart options={this.state.optionsBar} series={this.state.seriesBar} type=\"bar\" height={160} />\n</div>\n</div>\n\n      );\n    }\n  }\n\n",{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","severity":1,"message":"101","line":1,"column":8,"nodeType":"102","messageId":"103","endLine":1,"endColumn":12},{"ruleId":"100","severity":1,"message":"104","line":3,"column":10,"nodeType":"102","messageId":"103","endLine":3,"endColumn":16},{"ruleId":"100","severity":1,"message":"105","line":3,"column":18,"nodeType":"102","messageId":"103","endLine":3,"endColumn":23},{"ruleId":"100","severity":1,"message":"106","line":3,"column":25,"nodeType":"102","messageId":"103","endLine":3,"endColumn":29},{"ruleId":"100","severity":1,"message":"107","line":5,"column":8,"nodeType":"102","messageId":"103","endLine":5,"endColumn":12},{"ruleId":"100","severity":1,"message":"108","line":7,"column":8,"nodeType":"102","messageId":"103","endLine":7,"endColumn":26},{"ruleId":"100","severity":1,"message":"109","line":8,"column":8,"nodeType":"102","messageId":"103","endLine":8,"endColumn":24},{"ruleId":"100","severity":1,"message":"110","line":10,"column":7,"nodeType":"102","messageId":"103","endLine":10,"endColumn":16},{"ruleId":"111","severity":1,"message":"112","line":45,"column":19,"nodeType":"113","endLine":45,"endColumn":103},{"ruleId":"114","severity":1,"message":"115","line":19,"column":8,"nodeType":"116","endLine":19,"endColumn":15,"suggestions":"117"},{"ruleId":"96","replacedBy":"118"},{"ruleId":"98","replacedBy":"119"},{"ruleId":"100","severity":1,"message":"120","line":6,"column":8,"nodeType":"102","messageId":"103","endLine":6,"endColumn":19},{"ruleId":"100","severity":1,"message":"121","line":8,"column":8,"nodeType":"102","messageId":"103","endLine":8,"endColumn":14},{"ruleId":"100","severity":1,"message":"122","line":12,"column":10,"nodeType":"102","messageId":"103","endLine":12,"endColumn":24},{"ruleId":"100","severity":1,"message":"123","line":13,"column":19,"nodeType":"102","messageId":"103","endLine":13,"endColumn":28},{"ruleId":"100","severity":1,"message":"124","line":21,"column":10,"nodeType":"102","messageId":"103","endLine":21,"endColumn":16},{"ruleId":"100","severity":1,"message":"125","line":27,"column":8,"nodeType":"102","messageId":"103","endLine":27,"endColumn":13},{"ruleId":"100","severity":1,"message":"126","line":28,"column":8,"nodeType":"102","messageId":"103","endLine":28,"endColumn":12},{"ruleId":"100","severity":1,"message":"127","line":39,"column":7,"nodeType":"102","messageId":"103","endLine":39,"endColumn":16},{"ruleId":"100","severity":1,"message":"128","line":130,"column":7,"nodeType":"102","messageId":"103","endLine":130,"endColumn":11},{"ruleId":"100","severity":1,"message":"129","line":209,"column":21,"nodeType":"102","messageId":"103","endLine":209,"endColumn":33},{"ruleId":"100","severity":1,"message":"130","line":223,"column":22,"nodeType":"102","messageId":"103","endLine":223,"endColumn":33},{"ruleId":"100","severity":1,"message":"131","line":229,"column":9,"nodeType":"102","messageId":"103","endLine":229,"endColumn":19},{"ruleId":"114","severity":1,"message":"132","line":252,"column":7,"nodeType":"116","endLine":252,"endColumn":37,"suggestions":"133"},{"ruleId":"100","severity":1,"message":"134","line":9,"column":7,"nodeType":"102","messageId":"103","endLine":9,"endColumn":14},{"ruleId":"100","severity":1,"message":"135","line":18,"column":7,"nodeType":"102","messageId":"103","endLine":18,"endColumn":15},{"ruleId":"100","severity":1,"message":"136","line":3,"column":8,"nodeType":"102","messageId":"103","endLine":3,"endColumn":16},{"ruleId":"100","severity":1,"message":"137","line":34,"column":8,"nodeType":"102","messageId":"103","endLine":34,"endColumn":18},{"ruleId":"100","severity":1,"message":"138","line":256,"column":9,"nodeType":"102","messageId":"103","endLine":256,"endColumn":25},{"ruleId":"100","severity":1,"message":"139","line":264,"column":9,"nodeType":"102","messageId":"103","endLine":264,"endColumn":19},{"ruleId":"100","severity":1,"message":"140","line":268,"column":9,"nodeType":"102","messageId":"103","endLine":268,"endColumn":20},{"ruleId":"100","severity":1,"message":"136","line":3,"column":8,"nodeType":"102","messageId":"103","endLine":3,"endColumn":16},{"ruleId":"100","severity":1,"message":"141","line":5,"column":8,"nodeType":"102","messageId":"103","endLine":5,"endColumn":14},{"ruleId":"100","severity":1,"message":"142","line":36,"column":7,"nodeType":"102","messageId":"103","endLine":36,"endColumn":24},{"ruleId":"143","severity":1,"message":"144","line":83,"column":15,"nodeType":"145","messageId":"146","endLine":83,"endColumn":22},{"ruleId":"100","severity":1,"message":"138","line":173,"column":9,"nodeType":"102","messageId":"103","endLine":173,"endColumn":25},"no-native-reassign",["147"],"no-negated-in-lhs",["148"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Routes' is defined but never used.","'Route' is defined but never used.","'Link' is defined but never used.","'Home' is defined but never used.","'PaginaFonteExterna' is defined but never used.","'PaginaFonteLocal' is defined but never used.","'HeaderBox' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'opts'. Either include it or remove the dependency array.","ArrayExpression",["149"],["147"],["148"],"'CardActions' is defined but never used.","'Button' is defined but never used.","'RepeatOneSharp' is defined but never used.","'useEffect' is defined but never used.","'height' is defined but never used.","'Stack' is defined but never used.","'MACD' is defined but never used.","'ChartGrid' is assigned a value but never used.","'bull' is assigned a value but never used.","'setIndicator' is assigned a value but never used.","'setHasError' is assigned a value but never used.","'FormatDate' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'url'. Either include it or remove the dependency array.",["150"],"'HomeBox' is assigned a value but never used.","'AboutBox' is assigned a value but never used.","'ReactDOM' is defined but never used.","'ChartsGrid' is assigned a value but never used.","'CandleFormatdata' is assigned a value but never used.","'seriesMACD' is assigned a value but never used.","'OptionsMACD' is assigned a value but never used.","'styled' is defined but never used.","'traceFormatedData' is assigned a value but never used.","no-dupe-keys","Duplicate key 'toolbar'.","ObjectExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"151","fix":"152"},{"desc":"153","fix":"154"},"Update the dependencies array to be: [opts, url]",{"range":"155","text":"156"},"Update the dependencies array to be: [startDateValue, endDateValue, url]",{"range":"157","text":"158"},[529,536],"[opts, url]",[5070,5100],"[startDateValue, endDateValue, url]"]